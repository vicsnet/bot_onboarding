"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MIN_STAKE = void 0;
var ethers_1 = require("ethers");
var utils_1 = require("../../utils");
exports.MIN_STAKE = "100";
var MIN_STAKE_BN = ethers_1.ethers.utils.parseEther(exports.MIN_STAKE);
function provideStake(agentId, getCredentials, fortToken, stakingContract, stakingContractAddress, ethersAgentRegistryProvider) {
    (0, utils_1.assertIsNonEmptyString)(agentId, "agentId");
    (0, utils_1.assertExists)(getCredentials, "getCredentials");
    (0, utils_1.assertExists)(fortToken, "fortToken");
    (0, utils_1.assertExists)(stakingContract, "stakingContract");
    (0, utils_1.assertIsNonEmptyString)(stakingContractAddress, "stakingContractAddress");
    return function stake(fromWallet) {
        return __awaiter(this, void 0, void 0, function () {
            var privateKey, _a, activeStake, maticBalance, fortBalance, fortAllowance;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, getCredentials()];
                    case 1:
                        privateKey = (_b.sent()).privateKey;
                        fromWallet = fromWallet !== null && fromWallet !== void 0 ? fromWallet : new ethers_1.Wallet(privateKey);
                        return [4, Promise.all([
                                stakingContract.activeStakeFor(agentId),
                                fromWallet.connect(ethersAgentRegistryProvider).getBalance(),
                                fortToken.balanceOf(fromWallet),
                                fortToken.allowance(fromWallet, stakingContractAddress),
                            ])];
                    case 2:
                        _a = _b.sent(), activeStake = _a[0], maticBalance = _a[1], fortBalance = _a[2], fortAllowance = _a[3];
                        if (activeStake.gte(MIN_STAKE_BN)) {
                            console.log("agent ".concat(agentId, " already has stake of ").concat(ethers_1.ethers.utils.formatEther(activeStake), " FORT (minimum required: ").concat(exports.MIN_STAKE, " FORT)"));
                            return [2];
                        }
                        console.log("staking on agent ".concat(agentId, " from address ").concat(fromWallet.address, "..."));
                        if (maticBalance.eq(0)) {
                            throw new Error("".concat(fromWallet.address, " has insufficient MATIC balance for transaction fees"));
                        }
                        if (fortBalance.lt(MIN_STAKE_BN)) {
                            throw new Error("insufficient FORT balance to stake (need minimum ".concat(exports.MIN_STAKE, " FORT, currently have ").concat(ethers_1.ethers.utils.formatEther(fortBalance), " FORT)"));
                        }
                        if (!fortAllowance.lt(MIN_STAKE_BN)) return [3, 4];
                        console.log("approving ".concat(exports.MIN_STAKE, " FORT for staking..."));
                        return [4, fortToken.approve(fromWallet, stakingContractAddress, MIN_STAKE_BN)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        console.log("staking on agent ".concat(agentId, "..."));
                        return [4, stakingContract.depositStake(fromWallet, agentId, MIN_STAKE_BN)];
                    case 5:
                        _b.sent();
                        console.log("successfully staked ".concat(exports.MIN_STAKE, " FORT on agent ").concat(agentId));
                        return [2];
                }
            });
        });
    };
}
exports.default = provideStake;
