export declare enum EntityType {
    Unknown = 0,
    Address = 1,
    Transaction = 2,
    Block = 3,
    Url = 4
}
export declare const ENTITY_TYPE_STRING_TO_ENUM: {
    UNKNOWN: EntityType;
    ADDRESS: EntityType;
    TRANSACTION: EntityType;
    BLOCK: EntityType;
    URL: EntityType;
};
export declare type LabelSource = {
    alertHash?: string;
    alertId?: string;
    bot?: {
        id: string;
        image: string;
        imageHash: string;
        manifest: string;
    };
    chainId?: number;
    id?: string;
};
declare type LabelInput = {
    entityType: EntityType;
    entity: string;
    label: string;
    confidence: number;
    remove?: boolean;
    metadata?: {
        [key: string]: string;
    };
    source?: LabelSource;
    createdAt?: string;
    id?: string;
    uniqueKey?: string;
    embedding?: number[];
};
export declare class Label {
    readonly entityType: EntityType;
    readonly entity: string;
    readonly label: string;
    readonly confidence: number;
    readonly remove: boolean;
    readonly metadata: {
        [key: string]: string;
    };
    readonly source?: LabelSource | undefined;
    readonly id?: string | undefined;
    readonly createdAt?: string | undefined;
    readonly uniqueKey?: string | undefined;
    readonly embedding?: number[] | undefined;
    private constructor();
    static from(labelInput: LabelInput): Label;
    static fromObject({ entityType, entity, label, confidence, remove, metadata, source, id, createdAt, uniqueKey, embedding }: LabelInput): Label;
}
export {};
