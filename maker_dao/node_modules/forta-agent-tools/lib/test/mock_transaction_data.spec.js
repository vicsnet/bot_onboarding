"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ethers_1 = require("ethers");
var mock_transaction_data_1 = require("./mock_transaction_data");
var utils_1 = require("../utils");
describe("Mock Transaction Data Test Suite", function () {
    var mockTransactionData;
    beforeEach(function () {
        mockTransactionData = new mock_transaction_data_1.MockTransactionData();
    });
    it("sets the given Hash", function () {
        var hash = ethers_1.ethers.utils.keccak256("0x1234");
        mockTransactionData.setHash(hash);
        expect(mockTransactionData.hash).toEqual(hash);
        expect(mockTransactionData.transactionHash).toEqual(hash);
    });
    it("generates the same hash for the same txParams", function () {
        var txParams = {
            nonce: 1,
            gasLimit: ethers_1.BigNumber.from(21000),
            gasPrice: ethers_1.BigNumber.from(1000000000),
            to: (0, utils_1.createAddress)("0x67"),
            value: ethers_1.BigNumber.from(1000000000),
            data: "0x",
            chainId: 0,
            from: (0, utils_1.createAddress)("0x87"),
        };
        var hash1 = mockTransactionData.setTransactionResponse(txParams).hash;
        var hash2 = mockTransactionData.setTransactionReceipt(txParams).hash;
        var hash3 = mockTransactionData.generateHash().hash;
        expect(hash1).toEqual(hash2);
        expect(hash2).toEqual(hash3);
    });
    it("sets the given from address", function () {
        var from = (0, utils_1.createAddress)("0x1234");
        mockTransactionData.setFrom(from);
        expect(mockTransactionData.from).toEqual(from);
    });
    it("sets the given to address", function () {
        var to = (0, utils_1.createAddress)("0x1234");
        mockTransactionData.setTo(to);
        expect(mockTransactionData.to).toEqual(to);
    });
    it("returns an Object compatible with ethers TransactionResponse", function () {
        var txParams = {
            nonce: 1,
            gasLimit: ethers_1.BigNumber.from(21000),
            gasPrice: ethers_1.BigNumber.from(1000000000),
            to: (0, utils_1.createAddress)("0x67"),
            value: ethers_1.BigNumber.from(1000000000),
            data: "0x",
            chainId: 1,
            from: (0, utils_1.createAddress)("0x87"),
            timestamp: Date.now(),
        };
        var response = mockTransactionData
            .setTransactionResponse(txParams)
            .getTransactionResponse();
        expect(response).toEqual({
            hash: mockTransactionData.hash,
            blockHash: mockTransactionData.blockHash,
            blockNumber: mockTransactionData.blockNumber,
            timestamp: txParams.timestamp,
            confirmations: 0,
            from: txParams.from,
            to: txParams.to,
            data: txParams.data,
            gasLimit: txParams.gasLimit,
            gasPrice: txParams.gasPrice,
            value: txParams.value,
            nonce: txParams.nonce,
            chainId: txParams.chainId,
            type: 1,
            wait: expect.any(Function),
            accessList: undefined,
            maxFeePerGas: undefined,
            maxPriorityFeePerGas: undefined,
            r: undefined,
            s: undefined,
            v: undefined,
            raw: undefined,
        });
    });
    it("returns an Object compatible with ethers TransactionReceipt", function () {
        var txParams = {
            nonce: 1,
            gasLimit: ethers_1.BigNumber.from(21000),
            gasPrice: ethers_1.BigNumber.from(1000000000),
            to: (0, utils_1.createAddress)("0x67"),
            value: ethers_1.BigNumber.from(1000000000),
            data: "0x",
            chainId: 1,
            from: (0, utils_1.createAddress)("0x87"),
            timestamp: Date.now(),
        };
        var receipt = mockTransactionData
            .setTransactionReceipt(txParams)
            .getTransactionReceipt();
        expect(receipt).toEqual({
            blockHash: mockTransactionData.blockHash,
            blockNumber: mockTransactionData.blockNumber,
            byzantium: false,
            confirmations: 0,
            contractAddress: mockTransactionData.contractAddress,
            cumulativeGasUsed: mockTransactionData.cumulativeGasUsed,
            effectiveGasPrice: mockTransactionData.effectiveGasPrice,
            from: txParams.from,
            gasUsed: mockTransactionData.gasUsed,
            logs: mockTransactionData.logs,
            logsBloom: mockTransactionData.logsBloom,
            root: mockTransactionData.root,
            status: mockTransactionData.status,
            to: txParams.to,
            transactionHash: mockTransactionData.transactionHash,
            transactionIndex: mockTransactionData.transactionIndex,
            type: 1,
        });
    });
});
