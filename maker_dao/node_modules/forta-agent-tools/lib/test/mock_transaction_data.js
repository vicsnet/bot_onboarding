"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockTransactionData = void 0;
var forta_agent_1 = require("forta-agent");
var utils_1 = require("../utils");
var MockTransactionData = /** @class */ (function () {
    function MockTransactionData() {
        var _this = this;
        this._wait = function (confirmations) {
            return Promise.resolve(_this);
        };
        this.hash = "0x";
        this.confirmations = 0;
        this.from = (0, utils_1.createAddress)("0x1234");
        this.nonce = 1;
        this.gasLimit = forta_agent_1.ethers.BigNumber.from(21000);
        this.data = "0x";
        this.value = forta_agent_1.ethers.BigNumber.from(10000);
        this.chainId = 1;
        this.to = (0, utils_1.createAddress)("0x256");
        this.type = 1;
        this.blockHash = "0x";
        this.blockNumber = 1;
        this.timestamp = Date.now();
        this.contractAddress = (0, utils_1.createAddress)("0x789");
        this.transactionIndex = 0;
        this.gasUsed = forta_agent_1.ethers.BigNumber.from(1000);
        this.logsBloom = "0x";
        this.transactionHash = "0x";
        this.logs = [];
        this.cumulativeGasUsed = forta_agent_1.ethers.BigNumber.from(1000);
        this.effectiveGasPrice = forta_agent_1.ethers.BigNumber.from(1000);
        this.byzantium = false;
        this.wait = this._wait;
    }
    MockTransactionData.prototype.setHash = function (hash) {
        this.hash = hash;
        this.transactionHash = hash;
        return this;
    };
    MockTransactionData.prototype.generateHash = function () {
        var txParams = {
            to: this.to,
            nonce: this.nonce,
            gasLimit: this.gasLimit,
            gasPrice: this.gasPrice,
            data: this.data,
            value: forta_agent_1.ethers.utils.hexlify(this.value),
            chainId: this.chainId,
            type: this.type,
        };
        if (this.maxFeePerGas)
            txParams.maxFeePerGas = this.maxFeePerGas;
        if (this.maxPriorityFeePerGas)
            txParams.maxPriorityFeePerGas = this.maxPriorityFeePerGas;
        this.hash = (0, utils_1.createTransactionHash)(txParams);
        this.transactionHash = this.hash;
        return this;
    };
    MockTransactionData.prototype.setFrom = function (address) {
        this.from = address.toLowerCase();
        return this;
    };
    MockTransactionData.prototype.setTo = function (address) {
        this.to = address.toLowerCase();
        return this;
    };
    MockTransactionData.prototype.setNonce = function (value) {
        this.nonce = value;
        return this;
    };
    MockTransactionData.prototype.setValue = function (value) {
        this.value = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setGasLimit = function (value) {
        this.gasLimit = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setGasPrice = function (value) {
        this.gasPrice = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setData = function (data) {
        this.data = data;
        return this;
    };
    MockTransactionData.prototype.setGasUsed = function (value) {
        this.gasUsed = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setLogsBloom = function (value) {
        this.logsBloom = value;
        return this;
    };
    MockTransactionData.prototype.setLogs = function (logs) {
        this.logs = logs;
        return this;
    };
    MockTransactionData.prototype.setBlockNumber = function (blockNumber) {
        this.blockNumber = blockNumber;
        return this;
    };
    MockTransactionData.prototype.setTimestamp = function (timestamp) {
        this.timestamp = timestamp;
        return this;
    };
    MockTransactionData.prototype.setContractAddress = function (address) {
        this.contractAddress = address;
        return this;
    };
    MockTransactionData.prototype.setTransactionIndex = function (index) {
        this.transactionIndex = index;
        return this;
    };
    MockTransactionData.prototype.setTransactionHash = function (hash) {
        this.transactionHash = hash;
        return this;
    };
    MockTransactionData.prototype.setCumulativeGasUsed = function (value) {
        this.cumulativeGasUsed = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setEffectiveGasPrice = function (value) {
        this.effectiveGasPrice = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setByzantium = function (value) {
        this.byzantium = value;
        return this;
    };
    MockTransactionData.prototype.setStatus = function (value) {
        this.status = value;
        return this;
    };
    MockTransactionData.prototype.setBlockHash = function (hash) {
        this.blockHash = hash;
        return this;
    };
    MockTransactionData.prototype.setRoot = function (root) {
        this.root = root;
        return this;
    };
    MockTransactionData.prototype.setChainId = function (chainId) {
        this.chainId = chainId;
        return this;
    };
    MockTransactionData.prototype.setR = function (r) {
        this.r = r;
        return this;
    };
    MockTransactionData.prototype.setS = function (s) {
        this.s = s;
        return this;
    };
    MockTransactionData.prototype.setV = function (v) {
        this.v = v;
        return this;
    };
    MockTransactionData.prototype.setAccessList = function (accessList) {
        this.accessList = accessList;
        return this;
    };
    MockTransactionData.prototype.setMaxPriorityFeePerGas = function (value) {
        this.maxPriorityFeePerGas = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setMaxFeePerGas = function (value) {
        this.maxFeePerGas = forta_agent_1.ethers.BigNumber.from(value);
        return this;
    };
    MockTransactionData.prototype.setConfirmations = function (confirmations) {
        this.confirmations = confirmations;
        return this;
    };
    MockTransactionData.prototype.setRaw = function (raw) {
        this.raw = raw;
        return this;
    };
    MockTransactionData.prototype.setTransactionType = function (type) {
        this.type = type;
        return this;
    };
    MockTransactionData.prototype.setTransactionResponse = function (transaction) {
        this.blockNumber = transaction.blockNumber ? transaction.blockNumber : this.blockNumber;
        this.blockHash = transaction.blockHash ? transaction.blockHash : this.blockHash;
        this.timestamp = transaction.timestamp;
        this.confirmations = transaction.confirmations ? transaction.confirmations : this.confirmations;
        this.from = transaction.from ? transaction.from : this.from;
        this.raw = transaction.raw ? transaction.raw : this.raw;
        this.to = transaction.to ? transaction.to : this.to;
        this.nonce = transaction.nonce ? transaction.nonce : this.nonce;
        this.gasLimit = transaction.gasLimit ? transaction.gasLimit : this.gasLimit;
        this.gasPrice = transaction.gasPrice;
        this.data = transaction.data ? transaction.data : this.data;
        this.value = transaction.value ? transaction.value : this.value;
        this.chainId = transaction.chainId ? transaction.chainId : this.chainId;
        this.r = transaction.r ? transaction.r : this.r;
        this.s = transaction.s ? transaction.s : this.s;
        this.v = transaction.v ? transaction.v : this.v;
        this.type = transaction.type ? transaction.type : this.type;
        this.accessList = transaction.accessList ? transaction.accessList : this.accessList;
        this.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas
            ? transaction.maxPriorityFeePerGas
            : this.maxPriorityFeePerGas;
        this.maxFeePerGas = transaction.maxFeePerGas ? transaction.maxFeePerGas : this.maxFeePerGas;
        if (transaction.hash)
            this.setHash(transaction.hash);
        else
            this.generateHash();
        return this;
    };
    MockTransactionData.prototype.setTransactionReceipt = function (receipt) {
        this.to = receipt.to ? receipt.to : this.to;
        this.from = receipt.from ? receipt.from : this.from;
        this.contractAddress = receipt.contractAddress ? receipt.contractAddress : this.contractAddress;
        this.transactionIndex = receipt.transactionIndex ? receipt.transactionIndex : this.transactionIndex;
        this.root = receipt.root ? receipt.root : this.root;
        this.gasUsed = receipt.gasUsed ? receipt.gasUsed : this.gasUsed;
        this.logsBloom = receipt.logsBloom ? receipt.logsBloom : this.logsBloom;
        this.blockHash = receipt.blockHash ? receipt.blockHash : this.blockHash;
        this.hash = receipt.transactionHash ? receipt.transactionHash : this.hash;
        this.logs = receipt.logs ? receipt.logs : this.logs;
        this.cumulativeGasUsed = receipt.cumulativeGasUsed ? receipt.cumulativeGasUsed : this.cumulativeGasUsed;
        this.effectiveGasPrice = receipt.effectiveGasPrice ? receipt.effectiveGasPrice : this.effectiveGasPrice;
        this.byzantium = receipt.byzantium ? receipt.byzantium : this.byzantium;
        this.type = receipt.type ? receipt.type : this.type;
        this.status = receipt.status;
        if (receipt.transactionHash)
            this.setHash(receipt.transactionHash);
        else
            this.generateHash();
        return this;
    };
    MockTransactionData.prototype.getTransactionResponse = function () {
        var transaction = {
            hash: this.hash,
            blockNumber: this.blockNumber,
            blockHash: this.blockHash,
            timestamp: this.timestamp,
            confirmations: this.confirmations,
            from: this.from,
            raw: this.raw,
            wait: this.wait,
            to: this.to,
            nonce: this.nonce,
            gasLimit: this.gasLimit,
            gasPrice: this.gasPrice,
            data: this.data,
            value: this.value,
            chainId: this.chainId,
            r: this.r,
            s: this.s,
            v: this.v,
            type: this.type,
            accessList: this.accessList,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
            maxFeePerGas: this.maxFeePerGas,
        };
        return transaction;
    };
    MockTransactionData.prototype.getTransactionReceipt = function () {
        var receipt = {
            to: this.to,
            from: this.from,
            contractAddress: this.contractAddress,
            transactionIndex: this.transactionIndex,
            root: this.root,
            gasUsed: this.gasUsed,
            logsBloom: this.logsBloom,
            blockHash: this.blockHash,
            transactionHash: this.transactionHash,
            logs: this.logs,
            cumulativeGasUsed: this.cumulativeGasUsed,
            effectiveGasPrice: this.effectiveGasPrice,
            byzantium: this.byzantium,
            type: this.type,
            status: this.status,
            blockNumber: this.blockNumber,
            confirmations: this.confirmations,
        };
        return receipt;
    };
    return MockTransactionData;
}());
exports.MockTransactionData = MockTransactionData;
exports.default = MockTransactionData;
