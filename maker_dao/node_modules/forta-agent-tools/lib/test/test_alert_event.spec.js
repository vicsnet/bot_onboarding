"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var forta_agent_1 = require("forta-agent");
var utils_1 = require("../utils");
describe("Test AlertEvent", function () {
    var alert;
    var alertEvent;
    var alertInput;
    beforeEach(function () {
        alertInput = getAlertInput();
        alert = createAlert(alertInput);
        alertEvent = new forta_agent_1.AlertEvent(alert);
    });
    var createAlert = function (alertInput) {
        return forta_agent_1.Alert.fromObject(alertInput);
    };
    var getLabel = function (name, value) {
        return forta_agent_1.Label.fromObject({
            entityType: forta_agent_1.EntityType.Transaction,
            entity: (0, utils_1.createTransactionHash)({ to: (0, utils_1.createAddress)("0x1234") }),
            label: name,
            confidence: 1,
            metadata: { value: value },
        });
    };
    var getAlertInput = function () {
        var alertInput = {
            addresses: [(0, utils_1.createAddress)("0x1234"), (0, utils_1.createAddress)("0x5678"), (0, utils_1.createAddress)("0x9abc")],
            alertId: (0, utils_1.createTransactionHash)({ to: (0, utils_1.createAddress)("0x1234") }),
            hash: (0, utils_1.createTransactionHash)({ to: (0, utils_1.createAddress)("0x45678987654") }),
            contracts: [
                { address: (0, utils_1.createAddress)("0x1234"), name: "Contract1" },
                { address: (0, utils_1.createAddress)("0x5678"), name: "Contract2" },
                { address: (0, utils_1.createAddress)("0x9abc"), name: "Contract3" },
            ],
            createdAt: "2021-01-01T00:00:00.000Z",
            description: "Test Alert",
            findingType: "Info",
            name: "Test Alert",
            protocol: "Test",
            scanNodeCount: 1,
            severity: "Info",
            alertDocumentType: "Alert",
            relatedAlerts: [(0, utils_1.createTransactionHash)({ to: (0, utils_1.createAddress)("0x1234") })],
            chainId: 1,
            labels: [getLabel("label1", "value1"), getLabel("label2", "value2")],
            source: {
                transactionHash: (0, utils_1.createTransactionHash)({ to: (0, utils_1.createAddress)("0x1234") }),
                block: {
                    timestamp: "2021-01-01T00:00:00.000Z",
                    chainId: 1,
                    hash: (0, utils_1.createTransactionHash)({ to: (0, utils_1.createAddress)("0x1234") }),
                    number: 1,
                },
                bot: {
                    id: "botId",
                    reference: "botReference",
                    image: "botImage",
                },
                sourceAlert: {
                    hash: (0, utils_1.createTransactionHash)({ to: (0, utils_1.createAddress)("0x1234") }),
                    botId: "botId",
                    timestamp: "2021-01-01T00:00:00.000Z",
                    chainId: 1,
                },
            },
            metadata: {
                metadata1: "value1",
                metadata2: "value2",
            },
            projects: [
                {
                    id: "projectId",
                    name: "projectName",
                    contacts: {
                        securityEmailAddress: "securityEmailAddress",
                        generalEmailAddress: "generalEmailAddress",
                    },
                    website: "website",
                    token: {
                        symbol: "symbol",
                        name: "name",
                        decimals: 1,
                        chainId: 1,
                        address: (0, utils_1.createAddress)("0x1234"),
                    },
                    social: {
                        twitter: "twitter",
                        github: "github",
                        everest: "everest",
                        coingecko: "coingecko",
                    },
                },
            ],
            addressBloomFilter: {
                bitset: "bitset",
                k: "k",
                m: "m",
            },
        };
        return alertInput;
    };
    it("returns the alert with the set AlertInput values", function () {
        expect(alertEvent.alert).toEqual(alert);
    });
});
