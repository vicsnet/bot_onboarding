import { ethers } from "forta-agent";
export declare class MockTransactionData implements ethers.providers.TransactionResponse, ethers.providers.TransactionReceipt {
    hash: string;
    blockNumber: number;
    blockHash: string;
    timestamp?: number;
    confirmations: number;
    from: string;
    raw?: string;
    wait: (confirmations?: number) => Promise<ethers.providers.TransactionReceipt>;
    to: string;
    nonce: number;
    gasLimit: ethers.BigNumber;
    gasPrice?: ethers.BigNumber;
    data: string;
    value: ethers.BigNumber;
    chainId: number;
    r?: string;
    s?: string;
    v?: number;
    type: number;
    accessList?: ethers.utils.AccessList;
    maxPriorityFeePerGas?: ethers.BigNumber;
    maxFeePerGas?: ethers.BigNumber;
    contractAddress: string;
    transactionIndex: number;
    root?: string | undefined;
    gasUsed: ethers.BigNumber;
    logsBloom: string;
    transactionHash: string;
    logs: ethers.providers.Log[];
    cumulativeGasUsed: ethers.BigNumber;
    effectiveGasPrice: ethers.BigNumber;
    byzantium: boolean;
    status?: number | undefined;
    constructor();
    private _wait;
    setHash(hash: string): MockTransactionData;
    generateHash(): MockTransactionData;
    setFrom(address: string): MockTransactionData;
    setTo(address: string): MockTransactionData;
    setNonce(value: number): MockTransactionData;
    setValue(value: string): MockTransactionData;
    setGasLimit(value: string): MockTransactionData;
    setGasPrice(value: string): MockTransactionData;
    setData(data: string): MockTransactionData;
    setGasUsed(value: string): MockTransactionData;
    setLogsBloom(value: string): MockTransactionData;
    setLogs(logs: ethers.providers.Log[]): MockTransactionData;
    setBlockNumber(blockNumber: number): MockTransactionData;
    setTimestamp(timestamp: number): MockTransactionData;
    setContractAddress(address: string): MockTransactionData;
    setTransactionIndex(index: number): MockTransactionData;
    setTransactionHash(hash: string): MockTransactionData;
    setCumulativeGasUsed(value: string): MockTransactionData;
    setEffectiveGasPrice(value: string): MockTransactionData;
    setByzantium(value: boolean): MockTransactionData;
    setStatus(value: number): MockTransactionData;
    setBlockHash(hash: string): MockTransactionData;
    setRoot(root: string): MockTransactionData;
    setChainId(chainId: number): MockTransactionData;
    setR(r: string): MockTransactionData;
    setS(s: string): MockTransactionData;
    setV(v: number): MockTransactionData;
    setAccessList(accessList: ethers.utils.AccessList): MockTransactionData;
    setMaxPriorityFeePerGas(value: string): MockTransactionData;
    setMaxFeePerGas(value: string): MockTransactionData;
    setConfirmations(confirmations: number): MockTransactionData;
    setRaw(raw: string): MockTransactionData;
    setTransactionType(type: number): MockTransactionData;
    setTransactionResponse(transaction: Partial<ethers.providers.TransactionResponse>): MockTransactionData;
    setTransactionReceipt(receipt: Partial<ethers.providers.TransactionReceipt>): MockTransactionData;
    getTransactionResponse(): ethers.providers.TransactionResponse;
    getTransactionReceipt(): ethers.providers.TransactionReceipt;
}
export default MockTransactionData;
